// <auto-generated />
using System;
using MiSmart.DAL.DatabaseContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MiSmart.API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211119035407_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("postgis")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("MiSmart.DAL.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.CustomerUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID", "UserID")
                        .IsUnique();

                    b.ToTable("CustomerUsers");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Device", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceModelID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("TeamID")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeviceModelID");

                    b.HasIndex("TeamID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.DeviceModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("DeviceModels");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Field", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<double>("EdgeOffset")
                        .HasColumnType("double precision");

                    b.Property<string>("EdgedLocationPointsString")
                        .HasColumnType("text");

                    b.Property<string>("FieldLocation")
                        .HasColumnType("text");

                    b.Property<string>("FieldName")
                        .HasColumnType("text");

                    b.Property<string>("FlywayPointsString")
                        .HasColumnType("text");

                    b.Property<string>("GPSPointsString")
                        .HasColumnType("text");

                    b.Property<double>("InnerArea")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsLargeFarm")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationPointString")
                        .HasColumnType("text");

                    b.Property<double>("MappingArea")
                        .HasColumnType("double precision");

                    b.Property<double>("MappingTime")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PilotName")
                        .HasColumnType("text");

                    b.Property<double>("SprayDir")
                        .HasColumnType("double precision");

                    b.Property<double>("SprayWidth")
                        .HasColumnType("double precision");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("WorkArea")
                        .HasColumnType("double precision");

                    b.Property<double>("WorkSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.FlightStat", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<string>("FieldName")
                        .HasColumnType("text");

                    b.Property<double>("FlightDuration")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("FlightTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Flights")
                        .HasColumnType("integer");

                    b.Property<string>("FlywayPointsString")
                        .HasColumnType("text");

                    b.Property<string>("PilotName")
                        .HasColumnType("text");

                    b.Property<double>("TaskArea")
                        .HasColumnType("double precision");

                    b.Property<int>("TaskAreaUnit")
                        .HasColumnType("integer");

                    b.Property<string>("TaskLocation")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeviceID");

                    b.ToTable("FlightStats");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Plan", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<byte[]>("FileBytes")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Team", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TeamUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("TeamID")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("TeamID", "UserID")
                        .IsUnique();

                    b.ToTable("TeamUsers");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TelemetryRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalInformationString")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.ToTable("TelemetryRecords");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.CustomerUser", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Customer", "Customer")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Device", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Customer", "Customer")
                        .WithMany("Devices")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.DeviceModel", "DeviceModel")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.Team", "Team")
                        .WithMany("Devices")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");

                    b.Navigation("DeviceModel");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Field", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Customer", "Customer")
                        .WithMany("Fields")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.FlightStat", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Customer", "Customer")
                        .WithMany("FlightStats")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.Device", "Device")
                        .WithMany("FlightStats")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Team", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Customer", "Customer")
                        .WithMany("Teams")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TeamUser", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TelemetryRecord", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Device", "Device")
                        .WithMany("Records")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Customer", b =>
                {
                    b.Navigation("CustomerUsers");

                    b.Navigation("Devices");

                    b.Navigation("Fields");

                    b.Navigation("FlightStats");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Device", b =>
                {
                    b.Navigation("FlightStats");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.DeviceModel", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Team", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("TeamUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
