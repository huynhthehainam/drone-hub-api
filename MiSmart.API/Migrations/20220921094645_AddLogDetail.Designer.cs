// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using MiSmart.DAL.DatabaseContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MiSmart.API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220921094645_AddLogDetail")]
    partial class AddLogDetail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MiSmart.DAL.Models.Battery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ActualID")
                        .HasColumnType("text");

                    b.Property<int>("BatteryModelID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int?>("ExecutionCompanyID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LastGroupID")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("BatteryModelID");

                    b.HasIndex("ExecutionCompanyID");

                    b.HasIndex("LastGroupID");

                    b.ToTable("Batteries");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.BatteryGroupLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BatteryID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("BatteryID");

                    b.ToTable("BatteryGroupLogs");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.BatteryLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CellMaximumVoltage")
                        .HasColumnType("double precision");

                    b.Property<string>("CellMaximumVoltageUnit")
                        .HasColumnType("text");

                    b.Property<double>("CellMinimumVoltage")
                        .HasColumnType("double precision");

                    b.Property<string>("CellMinimumVoltageUnit")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Current")
                        .HasColumnType("double precision");

                    b.Property<string>("CurrentUnit")
                        .HasColumnType("text");

                    b.Property<int>("CycleCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("GroupLogID")
                        .HasColumnType("uuid");

                    b.Property<double>("PercentRemaining")
                        .HasColumnType("double precision");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("TemperatureUnit")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("GroupLogID");

                    b.ToTable("BatteryLogs");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.BatteryModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("BatteryModels");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.CustomerUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserUUID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("UserUUID")
                        .IsUnique();

                    b.ToTable("CustomerUsers");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Device", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceModelID")
                        .HasColumnType("integer");

                    b.Property<int?>("ExecutionCompanyID")
                        .HasColumnType("integer");

                    b.Property<List<Guid>>("LastBatterGroupLogs")
                        .HasColumnType("uuid[]");

                    b.Property<Guid?>("LastGroupID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastOnline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NextGeneratingAccessTokenTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("TeamID")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeviceModelID");

                    b.HasIndex("ExecutionCompanyID");

                    b.HasIndex("LastGroupID")
                        .IsUnique();

                    b.HasIndex("TeamID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.DeviceModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FileUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("DeviceModels");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.ExecutionCompany", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ExecutionCompanies");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.ExecutionCompanySetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("CostPerHectare")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExecutionCompanyID")
                        .HasColumnType("integer");

                    b.Property<double>("MainPilotCostPerHectare")
                        .HasColumnType("double precision");

                    b.Property<double>("SubPilotCostPerHectare")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("ExecutionCompanyID");

                    b.ToTable("ExecutionCompanySettings");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.ExecutionCompanyUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<int>("ExecutionCompanyID")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserUUID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("ExecutionCompanyID");

                    b.HasIndex("UserUUID")
                        .IsUnique();

                    b.ToTable("ExecutionCompanyUsers");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.ExecutionCompanyUserFlightStat", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ExecutionCompanyUserID")
                        .HasColumnType("bigint");

                    b.Property<Guid>("FlightStatID")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ExecutionCompanyUserID");

                    b.HasIndex("FlightStatID");

                    b.ToTable("ExecutionCompanyUserFlightStats");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Field", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<Polygon>("Border")
                        .HasColumnType("geography (polygon)");

                    b.Property<MultiPoint>("CalibrationPoints")
                        .HasColumnType("geography (multipoint)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<double>("EdgeOffset")
                        .HasColumnType("double precision");

                    b.Property<int>("ExecutionCompanyID")
                        .HasColumnType("integer");

                    b.Property<string>("FieldLocation")
                        .HasColumnType("text");

                    b.Property<string>("FieldName")
                        .HasColumnType("text");

                    b.Property<LineString>("Flyway")
                        .HasColumnType("geography (linestring)");

                    b.Property<MultiPoint>("GPSPoints")
                        .HasColumnType("geography (multipoint)");

                    b.Property<double>("InnerArea")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsLargeFarm")
                        .HasColumnType("boolean");

                    b.Property<Point>("LocationPoint")
                        .HasColumnType("geography (point)");

                    b.Property<double>("MappingArea")
                        .HasColumnType("double precision");

                    b.Property<double>("MappingTime")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PilotName")
                        .HasColumnType("text");

                    b.Property<double>("SprayDir")
                        .HasColumnType("double precision");

                    b.Property<double>("SprayWidth")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("WorkArea")
                        .HasColumnType("double precision");

                    b.Property<double>("WorkSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ExecutionCompanyID");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.FlightStat", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("AdditionalInformation")
                        .HasColumnType("jsonb");

                    b.Property<int?>("BatteryID")
                        .HasColumnType("integer");

                    b.Property<double?>("BatteryPercentRemaining")
                        .HasColumnType("double precision");

                    b.Property<Polygon>("Boundary")
                        .HasColumnType("geometry");

                    b.Property<double>("Cost")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<int>("CycleCount")
                        .HasColumnType("integer");

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<int?>("ExecutionCompanyID")
                        .HasColumnType("integer");

                    b.Property<string>("FieldName")
                        .HasColumnType("text");

                    b.Property<double>("FlightDuration")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("FlightTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FlightUID")
                        .HasColumnType("uuid");

                    b.Property<int>("Flights")
                        .HasColumnType("integer");

                    b.Property<LineString>("FlywayPoints")
                        .HasColumnType("geography (linestring)");

                    b.Property<string>("GCSVersion")
                        .HasColumnType("text");

                    b.Property<bool>("IsBingLocation")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBoundaryArchived")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTMInformationArchived")
                        .HasColumnType("boolean");

                    b.Property<JsonDocument>("Medicines")
                        .HasColumnType("jsonb");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<string>("PilotName")
                        .HasColumnType("text");

                    b.Property<List<int>>("SprayedIndexes")
                        .HasColumnType("integer[]");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StatusUpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("StatusUpdatedUserUUID")
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("TMField")
                        .HasColumnType("jsonb");

                    b.Property<string>("TMFieldID")
                        .HasColumnType("text");

                    b.Property<JsonDocument>("TMPlant")
                        .HasColumnType("jsonb");

                    b.Property<string>("TMPlantID")
                        .HasColumnType("text");

                    b.Property<JsonDocument>("TMUser")
                        .HasColumnType("jsonb");

                    b.Property<string>("TMUserUUID")
                        .HasColumnType("text");

                    b.Property<double>("TaskArea")
                        .HasColumnType("double precision");

                    b.Property<string>("TaskLocation")
                        .HasColumnType("text");

                    b.Property<long?>("TeamID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("BatteryID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("ExecutionCompanyID");

                    b.HasIndex("TeamID");

                    b.ToTable("FlightStats");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.FlightStatReportRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlightStatID")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Images")
                        .HasColumnType("text[]");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FlightStatID");

                    b.ToTable("FlightStatReportRecords");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogDetail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<JsonDocument>("Accel")
                        .HasColumnType("jsonb");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<double>("BatteryCellDeviation")
                        .HasColumnType("double precision");

                    b.Property<JsonDocument>("Edge")
                        .HasColumnType("jsonb");

                    b.Property<double>("FlightDuration")
                        .HasColumnType("double precision");

                    b.Property<double>("FlySpeed")
                        .HasColumnType("double precision");

                    b.Property<double>("Heigh")
                        .HasColumnType("double precision");

                    b.Property<Guid>("LogFileID")
                        .HasColumnType("uuid");

                    b.Property<double>("PercentBattery")
                        .HasColumnType("double precision");

                    b.Property<double>("PercentFuel")
                        .HasColumnType("double precision");

                    b.Property<JsonDocument>("Vibe")
                        .HasColumnType("jsonb");

                    b.HasKey("ID");

                    b.HasIndex("LogFileID")
                        .IsUnique();

                    b.ToTable("LogDetails");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogFile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<int>("DroneStatus")
                        .HasColumnType("integer");

                    b.Property<string[]>("Errors")
                        .HasColumnType("text[]");

                    b.Property<byte[]>("FileBytes")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LoggingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.ToTable("LogFiles");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogReport", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("AccidentTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("ImageUrls")
                        .HasColumnType("text[]");

                    b.Property<Guid>("LogFileID")
                        .HasColumnType("uuid");

                    b.Property<string>("PilotDescription")
                        .HasColumnType("text");

                    b.Property<string>("ReporterDescription")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserUUID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("LogFileID")
                        .IsUnique();

                    b.ToTable("LogReports");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogReportResult", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<Guid>("AnalystUUID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApproverUUID")
                        .HasColumnType("uuid");

                    b.Property<string>("DetailedAnalysis")
                        .HasColumnType("text");

                    b.Property<int?>("ExecutionCompanyID")
                        .HasColumnType("integer");

                    b.Property<string[]>("ImageUrls")
                        .HasColumnType("text[]");

                    b.Property<Guid>("LogFileID")
                        .HasColumnType("uuid");

                    b.Property<string>("Suggest")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ExecutionCompanyID");

                    b.HasIndex("LogFileID")
                        .IsUnique();

                    b.ToTable("LogReportResults");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogResultDetail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<long>("LogReportResultID")
                        .HasColumnType("bigint");

                    b.Property<int>("PartErrorID")
                        .HasColumnType("integer");

                    b.Property<string>("Resolve")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("LogReportResultID");

                    b.HasIndex("PartErrorID");

                    b.ToTable("LogResultDetail");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.MaintenanceReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ActualReportCreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<string>>("AttachmentLinks")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid>("UUID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserUUID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.ToTable("MaintenanceReports");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Part", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Part");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Plan", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FileBytes")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.StreamingLink", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.ToTable("StreamingLinks");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Team", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<int>("ExecutionCompanyID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDisbanded")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("TotalFlightDuration")
                        .HasColumnType("double precision");

                    b.Property<long>("TotalFlights")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalTaskArea")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("ExecutionCompanyID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TeamUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("ExecutionCompanyUserID")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamID")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ExecutionCompanyUserID");

                    b.HasIndex("TeamID", "ExecutionCompanyUserID")
                        .IsUnique();

                    b.ToTable("TeamUsers");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TelemetryGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.ToTable("TelemetryGroups");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TelemetryRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("AdditionalInformation")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Direction")
                        .HasColumnType("double precision");

                    b.Property<Guid>("GroupID")
                        .HasColumnType("uuid");

                    b.Property<Point>("LocationPoint")
                        .HasColumnType("geography (point)");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.ToTable("TelemetryRecords");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Battery", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.BatteryModel", "BatteryModel")
                        .WithMany("Batteries")
                        .HasForeignKey("BatteryModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.ExecutionCompany", "ExecutionCompany")
                        .WithMany("Batteries")
                        .HasForeignKey("ExecutionCompanyID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MiSmart.DAL.Models.BatteryGroupLog", "LastGroup")
                        .WithMany("LastBatteries")
                        .HasForeignKey("LastGroupID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BatteryModel");

                    b.Navigation("ExecutionCompany");

                    b.Navigation("LastGroup");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.BatteryGroupLog", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Battery", "Battery")
                        .WithMany("GroupLogs")
                        .HasForeignKey("BatteryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battery");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.BatteryLog", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.BatteryGroupLog", "GroupLog")
                        .WithMany("Logs")
                        .HasForeignKey("GroupLogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupLog");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.CustomerUser", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Customer", "Customer")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Device", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Customer", "Customer")
                        .WithMany("Devices")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.DeviceModel", "DeviceModel")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.ExecutionCompany", "ExecutionCompany")
                        .WithMany("Devices")
                        .HasForeignKey("ExecutionCompanyID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MiSmart.DAL.Models.TelemetryGroup", "LastGroup")
                        .WithOne("LastDevice")
                        .HasForeignKey("MiSmart.DAL.Models.Device", "LastGroupID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MiSmart.DAL.Models.Team", "Team")
                        .WithMany("Devices")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("DeviceModel");

                    b.Navigation("ExecutionCompany");

                    b.Navigation("LastGroup");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.ExecutionCompanySetting", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.ExecutionCompany", "ExecutionCompany")
                        .WithMany("Settings")
                        .HasForeignKey("ExecutionCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionCompany");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.ExecutionCompanyUser", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.ExecutionCompany", "ExecutionCompany")
                        .WithMany("ExecutionCompanyUsers")
                        .HasForeignKey("ExecutionCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionCompany");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.ExecutionCompanyUserFlightStat", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.ExecutionCompanyUser", "ExecutionCompanyUser")
                        .WithMany("ExecutionCompanyUserFlightStats")
                        .HasForeignKey("ExecutionCompanyUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.FlightStat", "FlightStat")
                        .WithMany("ExecutionCompanyUserFlightStats")
                        .HasForeignKey("FlightStatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionCompanyUser");

                    b.Navigation("FlightStat");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Field", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Customer", "Customer")
                        .WithMany("Fields")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.ExecutionCompany", "ExecutionCompany")
                        .WithMany("Fields")
                        .HasForeignKey("ExecutionCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ExecutionCompany");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.FlightStat", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Battery", "Battery")
                        .WithMany("FlightStats")
                        .HasForeignKey("BatteryID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MiSmart.DAL.Models.Customer", "Customer")
                        .WithMany("FlightStats")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.Device", "Device")
                        .WithMany("FlightStats")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.ExecutionCompany", "ExecutionCompany")
                        .WithMany("FlightStats")
                        .HasForeignKey("ExecutionCompanyID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MiSmart.DAL.Models.Team", "Team")
                        .WithMany("FlightStats")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Battery");

                    b.Navigation("Customer");

                    b.Navigation("Device");

                    b.Navigation("ExecutionCompany");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.FlightStatReportRecord", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.FlightStat", "FlightStat")
                        .WithMany("FlightStatReportRecords")
                        .HasForeignKey("FlightStatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightStat");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogDetail", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.LogFile", "LogFile")
                        .WithOne("LogDetail")
                        .HasForeignKey("MiSmart.DAL.Models.LogDetail", "LogFileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogFile");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogFile", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Device", "Device")
                        .WithMany("LogFiles")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogReport", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.LogFile", "LogFile")
                        .WithOne("LogReport")
                        .HasForeignKey("MiSmart.DAL.Models.LogReport", "LogFileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogFile");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogReportResult", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.ExecutionCompany", "ExecutionCompany")
                        .WithMany("LogReportResults")
                        .HasForeignKey("ExecutionCompanyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MiSmart.DAL.Models.LogFile", "LogFile")
                        .WithOne("LogReportResult")
                        .HasForeignKey("MiSmart.DAL.Models.LogReportResult", "LogFileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionCompany");

                    b.Navigation("LogFile");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogResultDetail", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.LogReportResult", "LogReportResult")
                        .WithMany("LogResultDetails")
                        .HasForeignKey("LogReportResultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.Part", "PartError")
                        .WithMany("LogResultDetails")
                        .HasForeignKey("PartErrorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogReportResult");

                    b.Navigation("PartError");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.MaintenanceReport", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Device", "Device")
                        .WithMany("MaintenanceReports")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Plan", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Device", "Device")
                        .WithMany("Plans")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.StreamingLink", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Device", "Device")
                        .WithMany("StreamingLinks")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Team", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.ExecutionCompany", "ExecutionCompany")
                        .WithMany("Teams")
                        .HasForeignKey("ExecutionCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionCompany");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TeamUser", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.ExecutionCompanyUser", "ExecutionCompanyUser")
                        .WithMany("TeamUsers")
                        .HasForeignKey("ExecutionCompanyUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiSmart.DAL.Models.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionCompanyUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TelemetryGroup", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.Device", "Device")
                        .WithMany("TelemetryGroups")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TelemetryRecord", b =>
                {
                    b.HasOne("MiSmart.DAL.Models.TelemetryGroup", "Group")
                        .WithMany("Records")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Battery", b =>
                {
                    b.Navigation("FlightStats");

                    b.Navigation("GroupLogs");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.BatteryGroupLog", b =>
                {
                    b.Navigation("LastBatteries");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.BatteryModel", b =>
                {
                    b.Navigation("Batteries");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Customer", b =>
                {
                    b.Navigation("CustomerUsers");

                    b.Navigation("Devices");

                    b.Navigation("Fields");

                    b.Navigation("FlightStats");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Device", b =>
                {
                    b.Navigation("FlightStats");

                    b.Navigation("LogFiles");

                    b.Navigation("MaintenanceReports");

                    b.Navigation("Plans");

                    b.Navigation("StreamingLinks");

                    b.Navigation("TelemetryGroups");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.DeviceModel", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.ExecutionCompany", b =>
                {
                    b.Navigation("Batteries");

                    b.Navigation("Devices");

                    b.Navigation("ExecutionCompanyUsers");

                    b.Navigation("Fields");

                    b.Navigation("FlightStats");

                    b.Navigation("LogReportResults");

                    b.Navigation("Settings");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.ExecutionCompanyUser", b =>
                {
                    b.Navigation("ExecutionCompanyUserFlightStats");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.FlightStat", b =>
                {
                    b.Navigation("ExecutionCompanyUserFlightStats");

                    b.Navigation("FlightStatReportRecords");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogFile", b =>
                {
                    b.Navigation("LogDetail");

                    b.Navigation("LogReport");

                    b.Navigation("LogReportResult");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.LogReportResult", b =>
                {
                    b.Navigation("LogResultDetails");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Part", b =>
                {
                    b.Navigation("LogResultDetails");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.Team", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("FlightStats");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("MiSmart.DAL.Models.TelemetryGroup", b =>
                {
                    b.Navigation("LastDevice");

                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
